/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ats.global.techsoft.slayers.model.impl;

import ats.global.techsoft.slayers.model.Employees;
import ats.global.techsoft.slayers.model.EmployeesModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Employees service. Represents a row in the &quot;ATS_Employees&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EmployeesModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeesImpl
 * @generated
 */
@JSON(strict = true)
public class EmployeesModelImpl
	extends BaseModelImpl<Employees> implements EmployeesModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employees model instance should use the <code>Employees</code> interface instead.
	 */
	public static final String TABLE_NAME = "ATS_Employees";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"EmployeeId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"EmpKey", Types.BIGINT}, {"EmpName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"EmpPhoto", Types.VARCHAR}, {"EmpGender", Types.VARCHAR},
		{"EmpAge", Types.INTEGER}, {"EmplRole", Types.VARCHAR},
		{"EmpAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EmployeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("EmpKey", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("EmpName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("EmpPhoto", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EmpGender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EmpAge", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("EmplRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EmpAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ATS_Employees (uuid_ VARCHAR(75) null,EmployeeId LONG not null primary key,groupId LONG,companyId LONG,EmpKey LONG,EmpName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,EmpPhoto VARCHAR(75) null,EmpGender VARCHAR(75) null,EmpAge INTEGER,EmplRole VARCHAR(75) null,EmpAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ATS_Employees";

	public static final String ORDER_BY_JPQL =
		" ORDER BY employees.EmpName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ATS_Employees.EmpName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPLOYEEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EMPNAME_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EmployeesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _EmployeeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmployeeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _EmployeeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Employees.class;
	}

	@Override
	public String getModelClassName() {
		return Employees.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Employees, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Employees, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employees, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Employees)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Employees, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Employees, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Employees)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Employees, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Employees, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Employees, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Employees, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Employees, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Employees, Object>>();
		Map<String, BiConsumer<Employees, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Employees, ?>>();

		attributeGetterFunctions.put("uuid", Employees::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Employees, String>)Employees::setUuid);
		attributeGetterFunctions.put("EmployeeId", Employees::getEmployeeId);
		attributeSetterBiConsumers.put(
			"EmployeeId",
			(BiConsumer<Employees, Long>)Employees::setEmployeeId);
		attributeGetterFunctions.put("groupId", Employees::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Employees, Long>)Employees::setGroupId);
		attributeGetterFunctions.put("companyId", Employees::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Employees, Long>)Employees::setCompanyId);
		attributeGetterFunctions.put("EmpKey", Employees::getEmpKey);
		attributeSetterBiConsumers.put(
			"EmpKey", (BiConsumer<Employees, Long>)Employees::setEmpKey);
		attributeGetterFunctions.put("EmpName", Employees::getEmpName);
		attributeSetterBiConsumers.put(
			"EmpName", (BiConsumer<Employees, String>)Employees::setEmpName);
		attributeGetterFunctions.put("createDate", Employees::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<Employees, Date>)Employees::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", Employees::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Employees, Date>)Employees::setModifiedDate);
		attributeGetterFunctions.put("EmpPhoto", Employees::getEmpPhoto);
		attributeSetterBiConsumers.put(
			"EmpPhoto", (BiConsumer<Employees, String>)Employees::setEmpPhoto);
		attributeGetterFunctions.put("EmpGender", Employees::getEmpGender);
		attributeSetterBiConsumers.put(
			"EmpGender",
			(BiConsumer<Employees, String>)Employees::setEmpGender);
		attributeGetterFunctions.put("EmpAge", Employees::getEmpAge);
		attributeSetterBiConsumers.put(
			"EmpAge", (BiConsumer<Employees, Integer>)Employees::setEmpAge);
		attributeGetterFunctions.put("EmplRole", Employees::getEmplRole);
		attributeSetterBiConsumers.put(
			"EmplRole", (BiConsumer<Employees, String>)Employees::setEmplRole);
		attributeGetterFunctions.put("EmpAddress", Employees::getEmpAddress);
		attributeSetterBiConsumers.put(
			"EmpAddress",
			(BiConsumer<Employees, String>)Employees::setEmpAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _EmployeeId;
	}

	@Override
	public void setEmployeeId(long EmployeeId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmployeeId = EmployeeId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalEmployeeId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("EmployeeId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getEmpKey() {
		return _EmpKey;
	}

	@Override
	public void setEmpKey(long EmpKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpKey = EmpKey;
	}

	@JSON
	@Override
	public String getEmpName() {
		if (_EmpName == null) {
			return "";
		}
		else {
			return _EmpName;
		}
	}

	@Override
	public void setEmpName(String EmpName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpName = EmpName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getEmpPhoto() {
		if (_EmpPhoto == null) {
			return "";
		}
		else {
			return _EmpPhoto;
		}
	}

	@Override
	public void setEmpPhoto(String EmpPhoto) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpPhoto = EmpPhoto;
	}

	@JSON
	@Override
	public String getEmpGender() {
		if (_EmpGender == null) {
			return "";
		}
		else {
			return _EmpGender;
		}
	}

	@Override
	public void setEmpGender(String EmpGender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpGender = EmpGender;
	}

	@JSON
	@Override
	public int getEmpAge() {
		return _EmpAge;
	}

	@Override
	public void setEmpAge(int EmpAge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpAge = EmpAge;
	}

	@JSON
	@Override
	public String getEmplRole() {
		if (_EmplRole == null) {
			return "";
		}
		else {
			return _EmplRole;
		}
	}

	@Override
	public void setEmplRole(String EmplRole) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmplRole = EmplRole;
	}

	@JSON
	@Override
	public String getEmpAddress() {
		if (_EmpAddress == null) {
			return "";
		}
		else {
			return _EmpAddress;
		}
	}

	@Override
	public void setEmpAddress(String EmpAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_EmpAddress = EmpAddress;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Employees.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Employees.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Employees toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Employees>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmployeesImpl employeesImpl = new EmployeesImpl();

		employeesImpl.setUuid(getUuid());
		employeesImpl.setEmployeeId(getEmployeeId());
		employeesImpl.setGroupId(getGroupId());
		employeesImpl.setCompanyId(getCompanyId());
		employeesImpl.setEmpKey(getEmpKey());
		employeesImpl.setEmpName(getEmpName());
		employeesImpl.setCreateDate(getCreateDate());
		employeesImpl.setModifiedDate(getModifiedDate());
		employeesImpl.setEmpPhoto(getEmpPhoto());
		employeesImpl.setEmpGender(getEmpGender());
		employeesImpl.setEmpAge(getEmpAge());
		employeesImpl.setEmplRole(getEmplRole());
		employeesImpl.setEmpAddress(getEmpAddress());

		employeesImpl.resetOriginalValues();

		return employeesImpl;
	}

	@Override
	public Employees cloneWithOriginalValues() {
		EmployeesImpl employeesImpl = new EmployeesImpl();

		employeesImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		employeesImpl.setEmployeeId(
			this.<Long>getColumnOriginalValue("EmployeeId"));
		employeesImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		employeesImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		employeesImpl.setEmpKey(this.<Long>getColumnOriginalValue("EmpKey"));
		employeesImpl.setEmpName(
			this.<String>getColumnOriginalValue("EmpName"));
		employeesImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		employeesImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		employeesImpl.setEmpPhoto(
			this.<String>getColumnOriginalValue("EmpPhoto"));
		employeesImpl.setEmpGender(
			this.<String>getColumnOriginalValue("EmpGender"));
		employeesImpl.setEmpAge(this.<Integer>getColumnOriginalValue("EmpAge"));
		employeesImpl.setEmplRole(
			this.<String>getColumnOriginalValue("EmplRole"));
		employeesImpl.setEmpAddress(
			this.<String>getColumnOriginalValue("EmpAddress"));

		return employeesImpl;
	}

	@Override
	public int compareTo(Employees employees) {
		int value = 0;

		value = getEmpName().compareTo(employees.getEmpName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Employees)) {
			return false;
		}

		Employees employees = (Employees)object;

		long primaryKey = employees.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Employees> toCacheModel() {
		EmployeesCacheModel employeesCacheModel = new EmployeesCacheModel();

		employeesCacheModel.uuid = getUuid();

		String uuid = employeesCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			employeesCacheModel.uuid = null;
		}

		employeesCacheModel.EmployeeId = getEmployeeId();

		employeesCacheModel.groupId = getGroupId();

		employeesCacheModel.companyId = getCompanyId();

		employeesCacheModel.EmpKey = getEmpKey();

		employeesCacheModel.EmpName = getEmpName();

		String EmpName = employeesCacheModel.EmpName;

		if ((EmpName != null) && (EmpName.length() == 0)) {
			employeesCacheModel.EmpName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			employeesCacheModel.createDate = createDate.getTime();
		}
		else {
			employeesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			employeesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			employeesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		employeesCacheModel.EmpPhoto = getEmpPhoto();

		String EmpPhoto = employeesCacheModel.EmpPhoto;

		if ((EmpPhoto != null) && (EmpPhoto.length() == 0)) {
			employeesCacheModel.EmpPhoto = null;
		}

		employeesCacheModel.EmpGender = getEmpGender();

		String EmpGender = employeesCacheModel.EmpGender;

		if ((EmpGender != null) && (EmpGender.length() == 0)) {
			employeesCacheModel.EmpGender = null;
		}

		employeesCacheModel.EmpAge = getEmpAge();

		employeesCacheModel.EmplRole = getEmplRole();

		String EmplRole = employeesCacheModel.EmplRole;

		if ((EmplRole != null) && (EmplRole.length() == 0)) {
			employeesCacheModel.EmplRole = null;
		}

		employeesCacheModel.EmpAddress = getEmpAddress();

		String EmpAddress = employeesCacheModel.EmpAddress;

		if ((EmpAddress != null) && (EmpAddress.length() == 0)) {
			employeesCacheModel.EmpAddress = null;
		}

		return employeesCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Employees, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Employees, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Employees, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Employees)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Employees>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Employees.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _EmployeeId;
	private long _groupId;
	private long _companyId;
	private long _EmpKey;
	private String _EmpName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _EmpPhoto;
	private String _EmpGender;
	private int _EmpAge;
	private String _EmplRole;
	private String _EmpAddress;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Employees, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Employees)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("EmployeeId", _EmployeeId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("EmpKey", _EmpKey);
		_columnOriginalValues.put("EmpName", _EmpName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("EmpPhoto", _EmpPhoto);
		_columnOriginalValues.put("EmpGender", _EmpGender);
		_columnOriginalValues.put("EmpAge", _EmpAge);
		_columnOriginalValues.put("EmplRole", _EmplRole);
		_columnOriginalValues.put("EmpAddress", _EmpAddress);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("EmployeeId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("EmpKey", 16L);

		columnBitmasks.put("EmpName", 32L);

		columnBitmasks.put("createDate", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("EmpPhoto", 256L);

		columnBitmasks.put("EmpGender", 512L);

		columnBitmasks.put("EmpAge", 1024L);

		columnBitmasks.put("EmplRole", 2048L);

		columnBitmasks.put("EmpAddress", 4096L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Employees _escapedModel;

}